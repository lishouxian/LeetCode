# Áªô‰Ω†‰∏§‰∏™ÂçïËØç word1 Âíå word2ÔºåËØ∑‰Ω†ËÆ°ÁÆóÂá∫Â∞Ü word1 ËΩ¨Êç¢Êàê word2 ÊâÄ‰ΩøÁî®ÁöÑÊúÄÂ∞ëÊìç‰ΩúÊï∞ „ÄÇ 
# 
#  ‰Ω†ÂèØ‰ª•ÂØπ‰∏Ä‰∏™ÂçïËØçËøõË°åÂ¶Ç‰∏ã‰∏âÁßçÊìç‰ΩúÔºö 
# 
#  
#  ÊèíÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶ 
#  Âà†Èô§‰∏Ä‰∏™Â≠óÁ¨¶ 
#  ÊõøÊç¢‰∏Ä‰∏™Â≠óÁ¨¶ 
#  
# 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  
# ËæìÂÖ•Ôºöword1 = "horse", word2 = "ros"
# ËæìÂá∫Ôºö3
# Ëß£ÈáäÔºö
# horse -> rorse (Â∞Ü 'h' ÊõøÊç¢‰∏∫ 'r')
# rorse -> rose (Âà†Èô§ 'r')
# rose -> ros (Âà†Èô§ 'e')
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  
# ËæìÂÖ•Ôºöword1 = "intention", word2 = "execution"
# ËæìÂá∫Ôºö5
# Ëß£ÈáäÔºö
# intention -> inention (Âà†Èô§ 't')
# inention -> enention (Â∞Ü 'i' ÊõøÊç¢‰∏∫ 'e')
# enention -> exention (Â∞Ü 'n' ÊõøÊç¢‰∏∫ 'x')
# exention -> exection (Â∞Ü 'n' ÊõøÊç¢‰∏∫ 'c')
# exection -> execution (ÊèíÂÖ• 'u')
#  
# 
#  
# 
#  ÊèêÁ§∫Ôºö 
# 
#  
#  0 <= word1.length, word2.length <= 500 
#  word1 Âíå word2 Áî±Â∞èÂÜôËã±ÊñáÂ≠óÊØçÁªÑÊàê 
#  
#  Related Topics Â≠óÁ¨¶‰∏≤ Âä®ÊÄÅËßÑÂàí 
#  üëç 1284 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        word1 = 'A' + word1
        word2 = 'A' + word2
        dp = [[10 ** 10] * (len(word2) + 1) for _ in range(len(word1) + 1)]
        dp[-1][-1] = 0
        for i in range(len(word1)):
            for j in range(len(word2)):
                if word1[i] == word2[j]:
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]) + 1)
                else:
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1
        print(dp)
        return dp[len(word1) - 1][len(word2) - 1]

        # leetcode submit region end(Prohibit modification and deletion)




a = Solution()
print(a.minDistance(word1 = "sea", word2 = "eat"))
